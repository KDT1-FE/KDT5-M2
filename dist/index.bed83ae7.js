class e{constructor(e={}){const{tagName:s="div",props:t={},state:n={}}=e;this.el=document.createElement(s),this.props=t,this.state=n,this.render()}render(){}}function s(e){location.hash||history.replaceState(null,"","/#/");const s=document.querySelector("router-view"),[t,n=""]=location.hash.split("?"),a=n.split("&").reduce(((e,s)=>{const[t,n]=s.split("=");return e[t]=n,e}),{});history.replaceState(a,"");const i=e.find((e=>new RegExp(`${e.path}/?$`).test(t)));s.innerHTML="",s.append((new i.component).el),window.scrollTo(0,0)}class t{constructor(e){this.state={},this.observers={};for(const s in e)Object.defineProperty(this.state,s,{get:()=>e[s],set:t=>{e[s]=t,Array.isArray(this.observers[s])&&this.observers[s].forEach((e=>e(t)))}})}subscribe(e,s){Array.isArray(this.observers[e])?this.observers[e].push(s):this.observers[e]=[s]}}class n extends e{constructor(){super({tagName:"header",state:{menus:[{name:"Search",href:"#/"},{name:"Movie",href:"#/movie?id=tt4520988"},{name:"About",href:"#/about"}]}}),window.addEventListener("popstate",(()=>{this.render()}))}render(){this.el.innerHTML=`\n      <a\n        href="#/"\n        class="logo">\n        <span>OMDBAPI</span>.COM\n      </a>\n      <nav>\n        <ul>\n          ${this.state.menus.map((e=>`\n              <li>\n                <a \n                  class="${e.href.split("?")[0]===location.hash.split("?")[0]?"active":""}"\n                  href="${e.href}"> \n                  ${e.name} \n                </a>\n              </li> `)).join("")}\n        </ul>\n      </nav>\n      <a href="#/about" class="user"> \n        <img src="https://avatars.githubusercontent.com/u/128357255?s=40&v=4" alt="User">\n      </a>\n    `}}var a=new t({photo:"https://avatars.githubusercontent.com/u/128357255?s=40&v=4",name:"MoonDaeHyun",email:"cbmd97@naver.com",github:"github.com/dhmoon11",number:"+82-10-1234-0000",repository:"https://github.com/dhmoon11"});class i extends e{constructor(){super({tagName:"footer"})}render(){const{github:e,repository:s}=a.state;this.el.innerHTML=`\n      <div>\n        <a\n          href="#/"\n          class="logo">\n          <span>OMDBAPI</span>.COM\n      </a>\n      </div>\n      <div>\n          <a href="${s}">\n            ${(new Date).getFullYear()}\n              MoonDaeHyun\n          </a>\n      </div>\n    `}}class r extends e{render(){this.el.classList.add("headline"),this.el.innerHTML="\n      <h1>\n        <span>OMDb API</span><br />\n        THE OPEN<br />\n        MOVIE DATABASE\n      </h1>\n      <p>\n        The OMDb API is a RESTful web service to obtain movie information,\n        all content and images on the site are contributed and maintained by our users.<br />\n        If you find this service useful, please consider making a one-time donation or become a patron.\n      </p>\n    "}}const o=new t({searchText:"",page:1,pageMax:1,movies:[],movie:{},loading:!1,message:"Search for the movie title!"});var l=o;const c=async e=>{o.state.loading=!0,o.state.page=e,1===e&&(o.state.movies=[],o.state.message="");try{const s=await fetch("/api/movie",{method:"POST",body:JSON.stringify({title:o.state.searchText,page:e})}),{Search:t,totalResults:n,Response:a,Error:i}=await s.json();"True"===a?(o.state.movies=[...o.state.movies,...t],o.state.pageMax=Math.ceil(Number(n)/10)):o.state.message=i}catch(e){console.log("searchMovies error:",e)}finally{o.state.loading=!1}};class d extends e{render(){this.el.classList.add("search"),this.el.innerHTML=`\n      <input \n        value="${l.state.searchText}" \n        placeholder="Enter the movie title to search!"/>\n      <button class="btn btn-primary">\n        Search!\n      </button>\n    `;const e=this.el.querySelector("input");e.addEventListener("input",(()=>{l.state.searchText=e.value})),e.addEventListener("keydown",(e=>{"Enter"===e.key&&l.state.searchText.trim()&&c(1)}));this.el.querySelector(".btn").addEventListener("click",(()=>{l.state.searchText.trim()&&c(1)}))}}class h extends e{constructor(e){super({props:e,tagName:"a"})}render(){const{movie:e}=this.props;this.el.setAttribute("href",`#/movie?id=${e.imdbID}`),this.el.classList.add("movie"),this.el.style.backgroundImage=`url(${e.Poster})`,this.el.innerHTML=`\n    <div class="info">\n      <div class="year">\n        ${e.Year}\n      </div>\n      <div class="title">\n        ${e.Title}\n      </div>\n    </div>\n    `}}class p extends e{constructor(){super(),l.subscribe("movies",(()=>{this.render()})),l.subscribe("loading",(()=>{this.render()})),l.subscribe("message",(()=>{this.render()}))}render(){this.el.classList.add("movie-list"),this.el.innerHTML=`\n      ${l.state.message?`<div class="message">${l.state.message}</div>`:'<div class="movies"></div>'}\n      <div class="the-loader hide"></div>\n    `;const e=this.el.querySelector(".movies");e?.append(...l.state.movies.map((e=>new h({movie:e}).el)));const s=this.el.querySelector(".the-loader");l.state.loading?s.classList.remove("hide"):s.classList.add("hide")}}class v extends e{constructor(){super({tagName:"button"}),l.subscribe("pageMax",(()=>{const{page:e,pageMax:s}=l.state;s>e?this.el.classList.remove("hide"):this.el.classList.add("hide")}))}render(){this.el.classList.add("btn","view-more","hide"),this.el.textContent="View more..",this.el.addEventListener("click",(async()=>{this.el.classList.add("hide"),await c(l.state.page+1)}))}}var m,u=(m=[{path:"#/",component:class extends e{render(){const e=(new r).el,s=(new d).el,t=(new p).el,n=(new v).el;this.el.classList.add("container"),this.el.append(e,s,t,n)}}},{path:"#/movie",component:class extends e{async render(){this.el.classList.add("container","the-movie"),this.el.innerHTML='\n      <div class="poster skeleton"></div>\n      <div class="specs">\n        <div class="title skeleton"></div>\n        <div class="labels skeleton"></div>\n        <div class="plot skeleton"></div>\n      </div>\n    ',await(async e=>{try{const s=await fetch("/api/movie",{method:"POST",body:JSON.stringify({id:e})});o.state.movie=await s.json()}catch(e){console.log("getMovieDetails error:",e)}})(history.state.id),console.log(l.state.movie);const{movie:e}=l.state,s=e.Poster.replace("SX300","SX700");this.el.innerHTML=`\n    <div \n      style="background-image: url(${s})"\n      class="poster"></div>\n    <div class="specs">\n      <div class="title">\n        ${e.Title}\n      </div>\n      <div class="labels">\n        <span>${e.Released}</span>\n        &nbsp;/&nbsp; \n        <span>${e.Runtime}</span>\n        &nbsp;/&nbsp;\n        <span>${e.Country}</span>\n      </div>\n      <div class="plot">\n        ${e.Plot}\n      </div>\n      <div>\n        <h3>Ratings</h3>\n        ${e.Ratings.map((e=>`<p>${e.Source} - ${e.Value}</p>`)).join("")}\n      </div>\n      <div>\n        <h3>Actors</h3>\n        <p>${e.Actors}</p>\n      </div>\n      <div>\n        <h3>Director</h3>\n        <p>${e.Director}</p>\n      </div>\n      <div>\n        <h3>Production</h3>\n        <p>${e.Production}</p>\n      </div>\n      <div>\n        <h3>Genre</h3>\n        <p>${e.Genre}</p>\n      </div>\n\n    </div>\n    `}}},{path:"#/about",component:class extends e{render(){const{photo:e,name:s,email:t,github:n,number:i}=a.state;this.el.classList.add("container","about"),this.el.innerHTML=`\n      <div style="background-image: url(${e});" \n      class="photo"></div>\n    <p class="name">${s}</p>\n    <p class="email">${t}</p>\n    <p class="github">${n}</p>\n    <p class="number">${i}</p>\n    `}}},{path:".*",component:class extends e{render(){this.el.classList.add("container","not-found"),this.el.innerHTML="\n      <h1>\n        Page Not Found.\n      </h1>\n    "}}}],function(){window.addEventListener("popstate",(()=>{s(m)})),s(m)});document.querySelector("#root").append((new class extends e{render(){const e=(new n).el,s=(new i).el,t=document.createElement("router-view");this.el.append(e,t,s)}}).el),u();
//# sourceMappingURL=index.bed83ae7.js.map
